from utils import randbool, randcell, randcell2
# –∫–∞—Ä—Ç–∞
# üå≥ üåä üöÅ üü© üî• üè• üíõ üíµ üì¶ ‚ö° üèÜ ‚õÖ ‚¨ú ‚¨õ ü™£
# 0 –ø–æ–ª—è
# 1 –¥–µ—Ä–µ–≤–æ
# 2 —Ä–µ–∫–∞
# 3 –≥–æ—Å–ø–∏—Ç–∞–ª—å
# 4 –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π
# 5 –û–≥–æ–Ω—å –ø—Ä–æ—Å—Ç–æ!
# 6 - 7 - –≥—Ä–∞–Ω–∏—Ü–∞
# 8 –•–µ–ª–∏–∫–æ–ø—Ç–µ—Ä –•–µ–ª–∏–∫–æ–ø—Ç–µ—Ä!
# 9 –≤–µ–¥—ë—Ä–∫–æ!
# 10 –∏—Å–∫–∞–ª –º–µ–¥—å –∞ –Ω–∞—à—ë–ª –∑–æ–ª–æ—Ç–æ ;3

ASSETS = "üü©üå≥üåäüè•üì¶üî•‚¨ú‚¨õüöÅü™£üèÜ" # –ø–∞–∫ –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–µ–Ω—å–∫–æ–π —Ä–∏—Å–æ–≤–∞—à–∫–∏
class Map():

    def generate_rivers(self, l):
        rc = randcell(self.h, self.w) # –£ –≤–∞—Å –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ —Ç.–∫. –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∞ –∏–Ω–≤–µ—Ä—Å–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —á–µ–≥–æ –∫–∞—Ä—Ç–∞ –ø—Ä–∏ –Ω–µ—Ä–∞–≤–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –≤—ã–¥–∞–≤–∞–ª–∞ –æ—à–∏–±–∫—É –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É list-–∞
        rx, ry = rc[0], rc[1]
        self.cells[rx][ry] = 2
        while l > 0:
            rc2 = randcell2(rx,ry)
            rx2, ry2 = rc2[0], rc2[1]
            if self.check_bounds(rx, ry) and self.check_bounds(rx2, ry2):
                self.cells[rx2][ry2] = 2
                rx, ry = rx2, ry2
                l -= 1


    def generate_forests(self, r, rw):
        for ri in range(self.h):
            for ci in range(self.w):
                if randbool(r, rw):
                    self.cells[ri][ci] = 1

    def generate_tree(self): # –¥—É—à–Ω–∏—Ç—å –∫–∞–∫ –ø—Ä–∏ –ø—Ä–æ—à–ª–æ–º –∫–æ–º–∏—Ç–µ –Ω–µ –±—É–¥—É. —É–∂–µ –ø—Ä–æ—Å—Ç–æ –ª–µ–Ω—å...
        rc = randcell(self.h, self.w) 
        rx, ry = rc[0], rc[1]
        if self.check_bounds(rx, ry) and self.cells[rx][ry] == 0:
            self.cells[rx][ry] = 1 


    def print_map(self, helico): 

        print(ASSETS[7] * (self.w + 2))
        for ri in range(self.h):
            print(ASSETS[7], end='')
            [print(ASSETS[8] if (helico.x == ri and helico.y == ci)
                    else ASSETS[self.cells[ri][ci]], end='') for ci in range(self.w)] 
            print(ASSETS[7])
        print(ASSETS[7] * (self.w + 2))

    def check_bounds(self, x, y):    
        if x < 0 or y < 0 or x >= self.h or y >= self.w:
            return False
        return True
    
    def add_fire(self):
        rc = randcell(self.h, self.w)
        rx, ry = rc[0], rc[1]
        if self.check_bounds(rx, ry) and self.cells[rx][ry] == 1:
            self.cells[rx][ry] = 5

    def update_fire(self):
        for ri in range(self.w):
            for ci in range(self.h):
                cell = self.cells
                if cell[ri][ci] == 5:
                    cell[ri][ci] = 0
                    self.cells[ri][ci] = cell[ri][ci] # –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∫ —Å–ø–∏—Å–∫—É int.

        for _ in range(5):
            self.add_fire() # –∞–π –π–∞ –π–∞–π –∫–æ—Å—Ç—ã–ª—å! –Ω–µ–∑—è —Ç–∞–∫! –Ω—É... –≤–∞–º –Ω–µ–∑—è –∞ –º–Ω–µ –º–æ–∂–Ω–æ.

    def __init__(self, h, w):
        self.w = w
        self.h = h
        self.cells = [[0 for _ in range(w)] for _ in range(h)]

